Файл application.py
import tkinter as tk

# Подключение дополнительных окн
from first import First
from second import Second
from third import Third
from fourth import Fourth
from fifth import Fifth
from sixth import Sixth
from start import Start # Нальное окно, которое перенаправляет на все остальные

class Application(tk.Tk):

    def __init__(self, *args, **kwargs):
        
        tk.Tk.__init__(self, *args, **kwargs)
        container = tk.Frame(self)

        container.pack(side="top", fill="both", expand = True)

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}

        for F in (Start, First, Second, Third, Fourth, Fifth, Sixth): #Здесь прописаны все классы-окна, которые используются

            frame = F(container, self, Start)

            self.frames[F] = frame

            frame.grid(row=0, column=0, sticky="nsew")

            frame.configure(background='azure') #Цвет фона

        self.show_frame(Start)

    def show_frame(self, cont):

        frame = self.frames[cont]
        frame.tkraise()

app = Application()

app.title("OLAP-pic") # название всей формы
app.minsize(530, 420) # размер окна

app.mainloop()

Файл start.py
import tkinter as tk

# Импорт имеющихся окон
# Классы находятся в соответствующих файлах
from first import First
from second import Second
from third import Third
from fourth import Fourth
from fifth import Fifth
from sixth import Sixth
#from idlelib.tooltip import ListboxToolTip

# Начальное окно
class Start(tk.Frame):

    def __init__(self, parent, controller, back=None):
        tk.Frame.__init__(self,parent)

        button1 = tk.Button(self, text="Обычный OLAP-куб", width=30, command=lambda: controller.show_frame(First))# В controller.show_frame - имя класса
        button1.pack(pady=15)

        button2 = tk.Button(self, text="1-ый срез OLAP-куба", width=30, command=lambda: controller.show_frame(Second))
        button2.pack()
        
        button3 = tk.Button(self, text="2-ой срез OLAP-куба", width=30, command=lambda: controller.show_frame(Third))
        button3.pack(pady=15)

        button4 = tk.Button(self, text="Транспонирование OLAP-куба", width=30, command=lambda: controller.show_frame(Fourth))
        button4.pack()

        button5 = tk.Button(self, text="Свертка OLAP-куба", width=30, command=lambda: controller.show_frame(Fifth))
        button5.pack(pady=15)

        button6 = tk.Button(self, text="Развертка OLAP-куба", width=30, command=lambda: controller.show_frame(Sixth))
        button6.pack()

 
Файл first.py
import tkinter as tk
from PIL import ImageTk, Image
from openpyxl import load_workbook
from olap import OLAP
import re

class First(tk.Frame):
    def __init__(self, parent, controller, back=None):
        tk.Frame.__init__(self,parent)
        self.create_widgets(parent, controller, back)

	#Элементы интерфейса	
    def create_widgets(self, parent, controller, back):

        self.l14 = tk.Label(self, text="Обычный OLAP-куб", font="Arial 11", background='azure')
        self.l14.pack(side="top", pady=5)	
	
        self.l1 = tk.Label(self, text="Имя файла:", background='azure')
        self.l1.pack(side="top")
        self.file = tk.Entry(self, bg="yellow")
        self.file.bind("<Key>", self.is_button_disabled)
        self.file.pack(side="top")

        self.l1 = tk.Label(self, text="Имя листа:", background='azure')
        self.l1.pack(side="top")
        self.list = tk.Entry(self, bg="yellow")
        self.list.bind("<Key>", self.is_button_disabled)
        self.list.pack(side="top")

        self.l1 = tk.Label(self, text="1 измерение:", background='azure')
        self.l1.pack(side="top")
        self.r1 = tk.Entry(self, bg="yellow")
        self.r1.bind("<Key>", self.is_button_disabled)
        self.r1.pack(side="top")

        self.l2 = tk.Label(self, text="2 измерение:", background='azure')
        self.l2.pack(side="top")
        self.r2 = tk.Entry(self, bg="yellow")
        self.r2.bind("<Key>", self.is_button_disabled)
        self.r2.pack(side="top")

        self.l3 = tk.Label(self, text="3 измерение:", background='azure')
        self.l3.pack(side="top")
        self.r3 = tk.Entry(self, bg="yellow")
        self.r3.bind("<Key>", self.is_button_disabled)
        self.r3.pack(side="top")

        self.imgF = tk.Label(self, text="Имя для сохранения (по умолчанию result.jpg): ", background='azure')
        self.imgF.pack(side="top")
        self.img = tk.Entry(self)
        self.img.bind("<Key>", self.is_button_disabled)
        self.img.pack(side="top")
 
        self.visualize_button = tk.Button(self)
        self.visualize_button["text"] = "Визуализировать"
        self.visualize_button["command"] = self.click
        self.visualize_button["state"] = "disabled"
        self.visualize_button.pack(side="top", pady=15)

        # Кнопка переводящая на начальный экран
        button = tk.Button(self, text="Назад", command=lambda: controller.show_frame(back))
        button.pack(side="top")
    
	#Проверка значений в ячейках измерений 
    def check_range_input(self, r):
        regex = r"[A-Z]{1}\d+:[A-Z]{1}\d+"
        if re.match(regex, r.get()):
            r["bg"] = "white"
            return True
        r["bg"] = "yellow"
        return False

	#Доступ к кнопке "Визуализировать"	
    def is_button_disabled(self, *args):
        if len(self.file.get()) != 0:
            self.file["bg"] = "white"
        else:
            self.file["bg"] = "yellow"
        if len(self.list.get()) != 0:
            self.list["bg"] = "white"
        else:
            self.list["bg"] = "yellow"
        if sum((self.check_range_input(self.r1), self.check_range_input(self.r2), self.check_range_input(self.r3))) == 3 and len(self.file.get()) != 0 and len(self.list.get()) != 0:
            self.visualize_button["state"] = "normal"

    #Обработчик нажатия кнопки "Визуализировать"
    def click(self):
        r = [self.r1.get(), self.r2.get(), self.r3.get()]

        wb = load_workbook(filename = self.file.get())
        sheet = wb[self.list.get()]

        # Координаты для каждой картинки
        X = (552, 510)
        Y = (130, 105)
        Z = (75, 545)

        x = ((210, 510), (310, 510), (410, 510))
        y = ((90, 244), (90, 344), (90, 444))
        z = ((538, 478), (588, 448), (638, 418))

        # Передача значений для рисования
        # Первым аргументом идет файл картинки на которой будет рисоваться результат
        # Новая картинка будет сохранена под именем result.jpg
        o = OLAP("pics/pic1.jpg", X, Y, Z, x, y, z)

        o.drawXName(sheet[r[0].split(":")[0][0]][int(r[0].split(":")[0][1:])-1].value)
        o.drawYName(sheet[r[1].split(":")[0][0]][int(r[1].split(":")[0][1:])-1].value)
        o.drawZName(sheet[r[2].split(":")[0][0]][int(r[2].split(":")[0][1:])-1].value)

        for rIndex in range (len(r)):
            startLetter, startNumber = r[rIndex].split(":")[0][0], int(r[rIndex].split(":")[0][1:])
            for i in range(len(o.points)):
                o.drawText(str(sheet[startLetter][startNumber+i].value), o.points[rIndex][i][0], o.points[rIndex][i][1], 0.0)

        # новую картинку сохраняем в тот файл, который указали в поле
        o.saveImage(self.img.get())

Файл second.py
import tkinter as tk
from PIL import ImageTk, Image
from openpyxl import load_workbook
from olap import OLAP
import re

class Second(tk.Frame):
    def __init__(self, parent, controller, back=None):
        tk.Frame.__init__(self,parent)
        self.create_widgets(parent, controller, back)

    def create_widgets(self, parent, controller, back):

        self.l14 = tk.Label(self, text="1-ый срез OLAP-куба", font="Arial 11", background='azure')
        self.l14.pack(side="top", pady=5)	
	
        self.l1 = tk.Label(self, text="Имя файла:", background='azure')
        self.l1.pack(side="top")
        self.file = tk.Entry(self, bg="yellow")
        self.file.bind("<Key>", self.is_button_disabled)
        self.file.pack(side="top")

        self.l1 = tk.Label(self, text="Имя листа:", background='azure')
        self.l1.pack(side="top")
        self.list = tk.Entry(self, bg="yellow")
        self.list.bind("<Key>", self.is_button_disabled)
        self.list.pack(side="top")

        self.l1 = tk.Label(self, text="1 измерение:", background='azure')
        self.l1.pack(side="top")
        self.r1 = tk.Entry(self, bg="yellow")
        self.r1.bind("<Key>", self.is_button_disabled)
        self.r1.pack(side="top")

        self.l2 = tk.Label(self, text="2 измерение:", background='azure')
        self.l2.pack(side="top")
        self.r2 = tk.Entry(self, bg="yellow")
        self.r2.bind("<Key>", self.is_button_disabled)
        self.r2.pack(side="top")

        self.l3 = tk.Label(self, text="3 измерение:", background='azure')
        self.l3.pack(side="top")
        self.r3 = tk.Entry(self, bg="yellow")
        self.r3.bind("<Key>", self.is_button_disabled)
        self.r3.pack(side="top")

        self.imgF = tk.Label(self, text="Имя для сохранения (по умолчанию result.jpg): ", background='azure')
        self.imgF.pack(side="top")
        self.img = tk.Entry(self)
        self.img.bind("<Key>", self.is_button_disabled)
        self.img.pack(side="top")

        self.visualize_button = tk.Button(self)
        self.visualize_button["text"] = "Визуализировать"
        self.visualize_button["command"] = self.click
        self.visualize_button["state"] = "disabled"
        self.visualize_button.pack(side="top", pady=15)

        # Кнопка переводящая на начальный экран
        button = tk.Button(self, text="Назад", command=lambda: controller.show_frame(back))
        button.pack(side="top")
    
    def check_range_input(self, r):
        regex = r"[A-Z]{1}\d+:[A-Z]{1}\d+"
        if re.match(regex, r.get()):
            r["bg"] = "white"
            return True
        r["bg"] = "yellow"
        return False

    def is_button_disabled(self, *args):
        if len(self.file.get()) != 0:
            self.file["bg"] = "white"
        else:
            self.file["bg"] = "yellow"
        if len(self.list.get()) != 0:
            self.list["bg"] = "white"
        else:
            self.list["bg"] = "yellow"
        if sum((self.check_range_input(self.r1), self.check_range_input(self.r2), self.check_range_input(self.r3))) == 3 and len(self.file.get()) != 0 and len(self.list.get()) != 0:
            self.visualize_button["state"] = "normal"

    # обработчик нажатия на кнопку Visualize
    def click(self):
        r = [self.r1.get(), self.r2.get(), self.r3.get()]

        wb = load_workbook(filename = self.file.get())
        sheet = wb[self.list.get()]

        # Координаты для каждой картинки
        X = (552, 510)
        Y = (130, 105)
        Z = (75, 545)

        x = ((210, 510), (310, 510), (410, 510))
        y = ((90, 244), (90, 344), (90, 444))
        z = ((538, 478), (588, 448), (638, 418))

        # А тут передаешь для рисования
        # Первым аргументом идет файл картинки на которой будет рисоваться результат
        # Новая картинка будет сохранена под именем result.jpg
        o = OLAP("pics/pic2.jpg", X, Y, Z, x, y, z)

        o.drawXName(sheet[r[0].split(":")[0][0]][int(r[0].split(":")[0][1:])-1].value)
        o.drawYName(sheet[r[1].split(":")[0][0]][int(r[1].split(":")[0][1:])-1].value)
        o.drawZName(sheet[r[2].split(":")[0][0]][int(r[2].split(":")[0][1:])-1].value)

        for rIndex in range (len(r)):
            startLetter, startNumber = r[rIndex].split(":")[0][0], int(r[rIndex].split(":")[0][1:])
            for i in range(len(o.points)):
                o.drawText(str(sheet[startLetter][startNumber+i].value), o.points[rIndex][i][0], o.points[rIndex][i][1], 0.0)

        # новую картинку сохраняем в тот файл, который указали в поле
        o.saveImage(self.img.get())

Файл third.py
import tkinter as tk
from PIL import ImageTk, Image
from openpyxl import load_workbook
from olap import OLAP
import re

class Third(tk.Frame):
    def __init__(self, parent, controller, back=None):
        tk.Frame.__init__(self,parent)
        self.create_widgets(parent, controller, back)
		
    def create_widgets(self, parent, controller, back):
	
        self.l14 = tk.Label(self, text="2-ой срез OLAP-куба", font="Arial 11", background='azure')
        self.l14.pack(side="top", pady=5)	

        self.l1 = tk.Label(self, text="Имя файла:", background='azure')
        self.l1.pack(side="top")
        self.file = tk.Entry(self, bg="yellow")
        self.file.bind("<Key>", self.is_button_disabled)
        self.file.pack(side="top")

        self.l1 = tk.Label(self, text="Имя листа:", background='azure')
        self.l1.pack(side="top")
        self.list = tk.Entry(self, bg="yellow")
        self.list.bind("<Key>", self.is_button_disabled)
        self.list.pack(side="top")

        self.l1 = tk.Label(self, text="1 измерение:", background='azure')
        self.l1.pack(side="top")
        self.r1 = tk.Entry(self, bg="yellow")
        self.r1.bind("<Key>", self.is_button_disabled)
        self.r1.pack(side="top")

        self.l2 = tk.Label(self, text="2 измерение:", background='azure')
        self.l2.pack(side="top")
        self.r2 = tk.Entry(self, bg="yellow")
        self.r2.bind("<Key>", self.is_button_disabled)
        self.r2.pack(side="top")

        self.l3 = tk.Label(self, text="3 измерение:", background='azure')
        self.l3.pack(side="top")
        self.r3 = tk.Entry(self, bg="yellow")
        self.r3.bind("<Key>", self.is_button_disabled)
        self.r3.pack(side="top")

        self.imgF = tk.Label(self, text="Имя для сохранения (по умолчанию result.jpg): ", background='azure')
        self.imgF.pack(side="top")
        self.img = tk.Entry(self)
        self.img.bind("<Key>", self.is_button_disabled)
        self.img.pack(side="top")

        self.visualize_button = tk.Button(self)
        self.visualize_button["text"] = "Визуализировать"
        self.visualize_button["command"] = self.click
        self.visualize_button["state"] = "disabled"
        self.visualize_button.pack(side="top", pady=15)

        # Кнопка переводящая на начальный экран
        button = tk.Button(self, text="Назад", command=lambda: controller.show_frame(back))
        button.pack(side="top")
    
    def check_range_input(self, r):
        regex = r"[A-Z]{1}\d+:[A-Z]{1}\d+"
        if re.match(regex, r.get()):
            r["bg"] = "white"
            return True
        r["bg"] = "yellow"
        return False

    def is_button_disabled(self, *args):
        if len(self.file.get()) != 0:
            self.file["bg"] = "white"
        else:
            self.file["bg"] = "yellow"
        if len(self.list.get()) != 0:
            self.list["bg"] = "white"
        else:
            self.list["bg"] = "yellow"
        if sum((self.check_range_input(self.r1), self.check_range_input(self.r2), self.check_range_input(self.r3))) == 3 and len(self.file.get()) != 0 and len(self.list.get()) != 0:
            self.visualize_button["state"] = "normal"

     # обработчик нажатия на кнопку "Визуализировать"
    def click(self):
        r = [self.r1.get(), self.r2.get(), self.r3.get()]

        wb = load_workbook(filename = self.file.get())
        sheet = wb[self.list.get()]

        # Координаты для каждой картинки
        X = (552, 510)
        Y = (130, 105)
        Z = (75, 545)

        x = ((210, 510), (310, 510), (410, 510))
        y = ((90, 244), (90, 344), (90, 444))
        z = ((538, 478), (588, 448), (638, 418))

        # А тут передаешь для рисования
        # Первым аргументом идет файл картинки на которой будет рисоваться результат
        # Новая картинка будет сохранена под именем result.jpg
        o = OLAP("pics/pic3.jpg", X, Y, Z, x, y, z)

        o.drawXName(sheet[r[0].split(":")[0][0]][int(r[0].split(":")[0][1:])-1].value)
        o.drawYName(sheet[r[1].split(":")[0][0]][int(r[1].split(":")[0][1:])-1].value)
        o.drawZName(sheet[r[2].split(":")[0][0]][int(r[2].split(":")[0][1:])-1].value)

        for rIndex in range (len(r)):
            startLetter, startNumber = r[rIndex].split(":")[0][0], int(r[rIndex].split(":")[0][1:])
            for i in range(len(o.points)):
                o.drawText(str(sheet[startLetter][startNumber+i].value), o.points[rIndex][i][0], o.points[rIndex][i][1], 0.0)

        # новую картинку сохраняем в тот файл, который указали в поле
        o.saveImage(self.img.get())
		

Файл fourth.py
import tkinter as tk
from PIL import ImageTk, Image
from openpyxl import load_workbook
from olap import OLAP
import re

class Fourth(tk.Frame):
    def __init__(self, parent, controller, back=None):
        tk.Frame.__init__(self,parent)
        self.create_widgets(parent, controller, back)

    def create_widgets(self, parent, controller, back):

        self.l14 = tk.Label(self, text="Траспонирование OLAP-куба", font="Arial 11", background='azure')
        self.l14.pack(side="top", pady=5)		
	
        self.l1 = tk.Label(self, text="Имя файла:", background='azure')
        self.l1.pack(side="top")
        self.file = tk.Entry(self, bg="yellow")
        self.file.bind("<Key>", self.is_button_disabled)
        self.file.pack(side="top")

        self.l1 = tk.Label(self, text="Имя листа:", background='azure')
        self.l1.pack(side="top")
        self.list = tk.Entry(self, bg="yellow")
        self.list.bind("<Key>", self.is_button_disabled)
        self.list.pack(side="top")

        self.l1 = tk.Label(self, text="1 измерение:", background='azure')
        self.l1.pack(side="top")
        self.r1 = tk.Entry(self, bg="yellow")
        self.r1.bind("<Key>", self.is_button_disabled)
        self.r1.pack(side="top")

        self.l2 = tk.Label(self, text="2 измерение:", background='azure')
        self.l2.pack(side="top")
        self.r2 = tk.Entry(self, bg="yellow")
        self.r2.bind("<Key>", self.is_button_disabled)
        self.r2.pack(side="top")

        self.l3 = tk.Label(self, text="3 измерение:", background='azure')
        self.l3.pack(side="top")
        self.r3 = tk.Entry(self, bg="yellow")
        self.r3.bind("<Key>", self.is_button_disabled)
        self.r3.pack(side="top")

        self.imgF = tk.Label(self, text="Имя для сохранения (по умолчанию result.jpg): ", background='azure')
        self.imgF.pack(side="top")
        self.img = tk.Entry(self)
        self.img.bind("<Key>", self.is_button_disabled)
        self.img.pack(side="top")

        self.visualize_button = tk.Button(self)
        self.visualize_button["text"] = "Визуализировать"
        self.visualize_button["command"] = self.click
        self.visualize_button["state"] = "disabled"
        self.visualize_button.pack(side="top", pady=15)

        # Кнопка переводящая на начальный экран
        button = tk.Button(self, text="Назад", command=lambda: controller.show_frame(back))
        button.pack(side="top")
    
    def check_range_input(self, r):
        regex = r"[A-Z]{1}\d+:[A-Z]{1}\d+"
        if re.match(regex, r.get()):
            r["bg"] = "white"
            return True
        r["bg"] = "yellow"
        return False

    def is_button_disabled(self, *args):
        if len(self.file.get()) != 0:
            self.file["bg"] = "white"
        else:
            self.file["bg"] = "yellow"
        if len(self.list.get()) != 0:
            self.list["bg"] = "white"
        else:
            self.list["bg"] = "yellow"
        if sum((self.check_range_input(self.r1), self.check_range_input(self.r2), self.check_range_input(self.r3))) == 3 and len(self.file.get()) != 0 and len(self.list.get()) != 0:
            self.visualize_button["state"] = "normal"

    # обработчик нажатия на кнопку "Визуализировать"
    def click(self):
        r = [self.r1.get(), self.r2.get(), self.r3.get()]

        wb = load_workbook(filename = self.file.get())
        sheet = wb[self.list.get()]

        # Координаты для каждой картинки
        X = (330, 203)
        Y = (160, 70)
        Z = (70, 380)

        # А тут передаешь для рисования
        # Первым аргументом идет файл картинки на которой будет рисоваться результат
        # Новая картинка будет сохранена под именем result.jpg
        o = OLAP("pics/pic4.jpg", X, Y, Z, x, y, z)

        o.drawXName(sheet[r[0].split(":")[0][0]][int(r[0].split(":")[0][1:])-1].value)
        o.drawYName(sheet[r[1].split(":")[0][0]][int(r[1].split(":")[0][1:])-1].value)
        o.drawZName(sheet[r[2].split(":")[0][0]][int(r[2].split(":")[0][1:])-1].value)
		
        o.drawX1Name(sheet[r[0].split(":")[0][0]][int(r[0].split(":")[0][1:])-1].value)
        o.drawY1Name(sheet[r[1].split(":")[0][0]][int(r[1].split(":")[0][1:])-1].value)
        o.drawZ1Name(sheet[r[2].split(":")[0][0]][int(r[2].split(":")[0][1:])-1].value)

        # новую картинку сохраняем в тот файл, который указали в поле
        o.saveImage(self.img.get())

Файл fifth.py
import tkinter as tk
from PIL import ImageTk, Image
from openpyxl import load_workbook
from olap import OLAP
import re

class Fifth(tk.Frame):
    def __init__(self, parent, controller, back=None):
        tk.Frame.__init__(self,parent)
        self.create_widgets(parent, controller, back)

    def create_widgets(self, parent, controller, back):

        self.l14 = tk.Label(self, text="Свертка OLAP-куба", font="Arial 11", background='azure')
        self.l14.pack(side="top", pady=5)	
	
        self.l1 = tk.Label(self, text="Имя файла:", background='azure')
        self.l1.pack(side="top")
        self.file = tk.Entry(self, bg="yellow")
        self.file.bind("<Key>", self.is_button_disabled)
        self.file.pack(side="top")

        self.l1 = tk.Label(self, text="Имя листа:", background='azure')
        self.l1.pack(side="top")
        self.list = tk.Entry(self, bg="yellow")
        self.list.bind("<Key>", self.is_button_disabled)
        self.list.pack(side="top")

        self.l1 = tk.Label(self, text="1 измерение:", background='azure')
        self.l1.pack(side="top")
        self.r1 = tk.Entry(self, bg="yellow")
        self.r1.bind("<Key>", self.is_button_disabled)
        self.r1.pack(side="top")

        self.l2 = tk.Label(self, text="2 измерение:", background='azure')
        self.l2.pack(side="top")
        self.r2 = tk.Entry(self, bg="yellow")
        self.r2.bind("<Key>", self.is_button_disabled)
        self.r2.pack(side="top")

        self.l3 = tk.Label(self, text="3 измерение:", background='azure')
        self.l3.pack(side="top")
        self.r3 = tk.Entry(self, bg="yellow")
        self.r3.bind("<Key>", self.is_button_disabled)
        self.r3.pack(side="top")

        self.imgF = tk.Label(self, text="Имя для сохранения (по умолчанию result.jpg): ", background='azure')
        self.imgF.pack(side="top")
        self.img = tk.Entry(self)
        self.img.bind("<Key>", self.is_button_disabled)
        self.img.pack(side="top")


        self.visualize_button = tk.Button(self)
        self.visualize_button["text"] = "Визуализировать"
        self.visualize_button["command"] = self.click
        self.visualize_button["state"] = "disabled"
        self.visualize_button.pack(side="top", pady=15)

        # Кнопка переводящая на начальный экран
        button = tk.Button(self, text="Назад", command=lambda: controller.show_frame(back))
        button.pack(side="top")
    
    def check_range_input(self, r):
        regex = r"[A-Z]{1}\d+:[A-Z]{1}\d+"
        if re.match(regex, r.get()):
            r["bg"] = "white"
            return True
        r["bg"] = "yellow"
        return False

    def is_button_disabled(self, *args):
        if len(self.file.get()) != 0:
            self.file["bg"] = "white"
        else:
            self.file["bg"] = "yellow"
        if len(self.list.get()) != 0:
            self.list["bg"] = "white"
        else:
            self.list["bg"] = "yellow"
        if sum((self.check_range_input(self.r1), self.check_range_input(self.r2), self.check_range_input(self.r3))) == 3 and len(self.file.get()) != 0 and len(self.list.get()) != 0:
            self.visualize_button["state"] = "normal"

     # обработчик нажатия на кнопку "Визуализировать"
    def click(self):
        r = [self.r1.get(), self.r2.get(), self.r3.get()]

        wb = load_workbook(filename = self.file.get())
        sheet = wb[self.list.get()]

        # Координаты для каждой картинки
        X = (480, 395)
        Y = (165, 100)
        Z = (120, 420)

        x = ((240, 390), (340, 390))
        y = ((90, 220), (90, 320))
        z = ((472, 357), (520, 330))

        # А тут передаешь для рисования
        # Первым аргументом идет файл картинки на которой будет рисоваться результат
        # Новая картинка будет сохранена под именем result.jpg
        o = OLAP("pics/pic5.jpg", X, Y, Z, x, y, z)

        o.drawXName(sheet[r[0].split(":")[0][0]][int(r[0].split(":")[0][1:])-1].value)
        o.drawYName(sheet[r[1].split(":")[0][0]][int(r[1].split(":")[0][1:])-1].value)
        o.drawZName(sheet[r[2].split(":")[0][0]][int(r[2].split(":")[0][1:])-1].value)

        for rIndex in range (len(r)):
            startLetter, startNumber = r[rIndex].split(":")[0][0], int(r[rIndex].split(":")[0][1:])
            for i in range(len(o.points)):
                o.drawText(str(sheet[startLetter][startNumber+i].value), o.points[rIndex][i][0], o.points[rIndex][i][1], 0.0)

        # новую картинку сохраняем в тот файл, который указали в поле
        o.saveImage(self.img.get())

Файл sixth.py
import tkinter as tk
from PIL import ImageTk, Image
from openpyxl import load_workbook
from olap import OLAP
import re

class Sixth(tk.Frame):
    def __init__(self, parent, controller, back=None):
        tk.Frame.__init__(self,parent)
        self.create_widgets(parent, controller, back)

    def create_widgets(self, parent, controller, back):

        self.l14 = tk.Label(self, text="Развертка OLAP-куба", font="Arial 11", background='azure')
        self.l14.pack(side="top", pady=5)	
	
        self.l1 = tk.Label(self, text="Имя файла:", background='azure')
        self.l1.pack(side="top")
        self.file = tk.Entry(self, bg="yellow")
        self.file.bind("<Key>", self.is_button_disabled)
        self.file.pack(side="top")

        self.l1 = tk.Label(self, text="Имя листа:", background='azure')
        self.l1.pack(side="top")
        self.list = tk.Entry(self, bg="yellow")
        self.list.bind("<Key>", self.is_button_disabled)
        self.list.pack(side="top")

        self.l1 = tk.Label(self, text="1 измерение:", background='azure')
        self.l1.pack(side="top")
        self.r1 = tk.Entry(self, bg="yellow")
        self.r1.bind("<Key>", self.is_button_disabled)
        self.r1.pack(side="top")

        self.l2 = tk.Label(self, text="2 измерение:", background='azure')
        self.l2.pack(side="top")
        self.r2 = tk.Entry(self, bg="yellow")
        self.r2.bind("<Key>", self.is_button_disabled)
        self.r2.pack(side="top")

        self.l3 = tk.Label(self, text="3 измерение:", background='azure')
        self.l3.pack(side="top")
        self.r3 = tk.Entry(self, bg="yellow")
        self.r3.bind("<Key>", self.is_button_disabled)
        self.r3.pack(side="top")

        self.imgF = tk.Label(self, text="Имя для сохранения (по умолчанию result.jpg): ", background='azure')
        self.imgF.pack(side="top")
        self.img = tk.Entry(self)
        self.img.bind("<Key>", self.is_button_disabled)
        self.img.pack(side="top")

        self.visualize_button = tk.Button(self)
        self.visualize_button["text"] = "Визуализировать"
        self.visualize_button["command"] = self.click
        self.visualize_button["state"] = "disabled"
        self.visualize_button.pack(side="top", pady=15)

        # Кнопка переводящая на начальный экран
        button = tk.Button(self, text="Назад", command=lambda: controller.show_frame(back))
        button.pack(side="top")
    
    def check_range_input(self, r):
        regex = r"[A-Z]{1}\d+:[A-Z]{1}\d+"
        if re.match(regex, r.get()):
            r["bg"] = "white"
            return True
        r["bg"] = "yellow"
        return False

    def is_button_disabled(self, *args):
        if len(self.file.get()) != 0:
            self.file["bg"] = "white"
        else:
            self.file["bg"] = "yellow"
        if len(self.list.get()) != 0:
            self.list["bg"] = "white"
        else:
            self.list["bg"] = "yellow"
        if sum((self.check_range_input(self.r1), self.check_range_input(self.r2), self.check_range_input(self.r3))) == 3 and len(self.file.get()) != 0 and len(self.list.get()) != 0:
            self.visualize_button["state"] = "normal"

    # обработчик нажатия на кнопку "Визуализировать"
    def click(self):
        r = [self.r1.get(), self.r2.get(), self.r3.get()]

        wb = load_workbook(filename = self.file.get())
        sheet = wb[self.list.get()]

        # Координаты для каждой картинки
        X = (552, 510)
        Y = (130, 105)
        Z = (75, 545)

        x = ((210, 510), (310, 510), (410, 510))
        y = ((90, 244), (90, 344), (90, 444))
        z = ((538, 478), (588, 448), (638, 418))

        # А тут передаешь для рисования
        # Первым аргументом идет файл картинки на которой будет рисоваться результат
        # Новая картинка будет сохранена под именем result.jpg
        o = OLAP("pics/pic6.jpg", X, Y, Z, x, y, z)

        o.drawXName(sheet[r[0].split(":")[0][0]][int(r[0].split(":")[0][1:])-1].value)
        o.drawYName(sheet[r[1].split(":")[0][0]][int(r[1].split(":")[0][1:])-1].value)
        o.drawZName(sheet[r[2].split(":")[0][0]][int(r[2].split(":")[0][1:])-1].value)

        for rIndex in range (len(r)):
            startLetter, startNumber = r[rIndex].split(":")[0][0], int(r[rIndex].split(":")[0][1:])
            for i in range(len(o.points)):
                o.drawText(str(sheet[startLetter][startNumber+i].value), o.points[rIndex][i][0], o.points[rIndex][i][1], 0.0)

        # новую картинку сохраняем в тот файл, который указали в поле
        o.saveImage(self.img.get())

Файл olap.py
#!/usr/bin/python3

from openpyxl import load_workbook
from PIL import Image
from PIL import ImageFont, ImageDraw, ImageOps
import time

class OLAP:

    def __init__(self, filename, X, Y, Z, x, y, z):
        self.im = Image.open(filename)

        self.X = X
        self.Y = Y
        self.Z = Z

        self.x = x
        self.y = y
        self.z = z

        self.points = (self.x, self.y, self.z)

    def drawText(self, text, x, y, angle):
        f = ImageFont.truetype("arial.ttf", 17, encoding='UTF-8')
        txt=Image.new('RGBA', (500,50))
        d = ImageDraw.Draw(txt)
        d.text( (0, 0), text,  font=f, fill=(0,0,0,255))
        w=txt.rotate(angle, expand=True, center=(0,0))
        self.im.paste(w, (x,y),  w)

    def drawZName(self, text):
        self.drawText(text, self.Z[0], self.Z[1], 0.0)

    def drawXName(self, text):
        self.drawText(text, self.X[0], self.X[1], 0.0)

    def drawYName(self, text):
        self.drawText(text, self.Y[0], self.Y[1], 0.0)
		
    def drawZ1Name(self, text):
        self.drawText(text, 623, 380, 0.0)

    def drawX1Name(self, text):
        self.drawText(text, 710, 70, 0.0)

    def drawY1Name(self, text):
        self.drawText(text, 425, 155, 0.0)	

    def saveImage(self, filename):
        if filename.strip(" ") == "":
            filename = "result.jpg"
        self.im.save(filename)

